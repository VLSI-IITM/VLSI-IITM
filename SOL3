module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output done
  ); 

	localparam [2:0] IDLE 	 = 3'b000,
					 START 	 = 3'b001,
					 RECEIVE = 3'b010,
					 WAIT	 = 3'b011,
					 STOP    = 3'b100;

	reg [2:0] state, next;
    reg [2:0] counter;

	always @(*) begin
		case(state)
			IDLE  : next = (in) ? IDLE : START;
			START : next = RECEIVE;
			RECEIVE :next = counter==3'd7 ? in ? STOP : WAIT : RECEIVE ;
			WAIT : next = (in) ? IDLE : WAIT;
			STOP : next = (in) ? IDLE : START;
		endcase
	end

	always @(posedge clk) begin
		if(reset) state <= IDLE;
		else state <= next;
	end

    always@(posedge clk) begin
          if (reset) counter <= 0;
        else if(state== RECEIVE) counter = counter + 1'd1;
        else counter <= 0;
        
        
    end
    
    /*
	always @(posedge clk) begin
        if (reset) counter <= 0;
		else begin
            case(state) 
				RECEIVE : counter = counter + 1'd1;
				default : counter <= 0;
			endcase
	end
    end
    */
    assign done=state==STOP;

endmodule
