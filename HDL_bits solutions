HDL bits solutions:
Fsm serial:
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output done
); 

    always@(posedge clk) begin
        if(reset) state <=  idle;
        else      state <=  next_state;
    end
    
    reg [3:0] state,next_state;
    
     parameter idle = 4'd0;
     parameter start = 4'd1;
    
     parameter data0 = 4'd2;
     parameter data1 = 4'd3;
     parameter data2= 4'd4;
     parameter data3 = 4'd5;
     parameter data4 = 4'd6;
     parameter data5 = 4'd7;
     parameter data6 = 4'd8;
    parameter data7 = 4'd9;
  //   parameter data8 = 4'd12;
       parameter stop = 4'd10;
       parameter Wait = 4'd11;
    
    always@(*) begin
        case(state)
        idle : next_state = ~in ? start : idle;
        start : next_state = data0;
            
              data0 : next_state =data1;
             data1 : next_state =data2;
             data2 : next_state =data3;
             data3 : next_state =data4;
             data4 : next_state =data5;
             data5 : next_state =data6;
             data6 : next_state =data7;
         //    data7 : next_state =data8;
            
        data7 :  next_state= in ? stop : Wait ;
        Wait : next_state=in ? idle : Wait;
        stop : next_state=in ? idle : start;  
                    
                    
        endcase 
        end
        
        
    assign done = state==stop;
      
    
    
    
endmodule
